// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "../ICounter.sol";

// We use .call() and .staticcall() to call the Counter precompile
// because using ICounter(address) might check for EXTCODESIZE != 0
// and revert.
// This library will eventually be autogenerated from the ABI.
library CounterPrecompile {
    address constant counterAddress = address(0x80);

    function number() internal view returns (uint256) {
        (bool success, bytes memory data) = counterAddress.staticcall(
            abi.encodeWithSignature("number()")
        );
        require(success);
        return abi.decode(data, (uint256));
    }

    function setNumber(uint256 newNumber) internal {
        (bool success, ) = counterAddress.call(
            abi.encodeWithSignature("setNumber(uint256)", newNumber)
        );
        require(success);
    }

    function increment() internal {
        (bool success, ) = counterAddress.call(
            abi.encodeWithSignature("increment()")
        );
        require(success);
    }
}

contract TestCounter {
    function setUp() public {}

    function testNumber() public view {
        require(CounterPrecompile.number() == 0);
    }

    function testSetNumber() public {
        CounterPrecompile.setNumber(10);
        require(CounterPrecompile.number() == 10);
    }

    function testIncrement() public {
        CounterPrecompile.increment();
        require(CounterPrecompile.number() == 1);
    }
}
